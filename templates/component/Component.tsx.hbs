/**
 * @fileoverview {{name}} Component
 * @author AI Generated Component
 * @category {{category}}
 * @complexity {{complexity}}
 */

import React from 'react';
import { styled } from '@mui/material/styles';
import { Box, type BoxProps } from '@mui/material';
import { {{name}}Props } from './{{name}}.types';
import { {{constantCase name}}_CONSTANTS } from './{{name}}.constants';

/**
 * Styled root component for {{name}}
 */
const {{name}}Root = styled(Box, {
  name: 'Mui{{name}}',
  slot: 'Root',
  shouldForwardProp: (prop) => 
    prop !== 'variant' && 
    prop !== 'size' && 
    prop !== 'disabled' && 
    prop !== 'loading',
})<{{name}}Props>(({ theme, variant = 'primary', size = 'medium', disabled, loading }) => ({
  // Base styles
  position: 'relative',
  display: 'inline-flex',
  alignItems: 'center',
  justifyContent: 'center',
  outline: 0,
  border: 0,
  margin: 0,
  borderRadius: theme.shape.borderRadius,
  cursor: disabled || loading ? 'not-allowed' : 'pointer',
  userSelect: 'none',
  verticalAlign: 'middle',
  textDecoration: 'none',
  fontFamily: theme.typography.fontFamily,
  fontWeight: theme.typography.fontWeightMedium,
  lineHeight: 1.75,
  letterSpacing: '0.02857em',
  textTransform: 'uppercase',
  transition: theme.transitions.create([
    'background-color',
    'box-shadow',
    'border-color',
    'color',
    'transform',
  ], {
    duration: theme.transitions.duration.short,
    easing: theme.transitions.easing.easeInOut,
  }),

  // Size variants
  ...(size === 'small' && {
    minHeight: 32,
    padding: '4px 10px',
    fontSize: theme.typography.pxToRem(13),
  }),
  ...(size === 'medium' && {
    minHeight: 36,
    padding: '6px 16px',
    fontSize: theme.typography.pxToRem(14),
  }),
  ...(size === 'large' && {
    minHeight: 42,
    padding: '8px 22px',
    fontSize: theme.typography.pxToRem(15),
  }),

  // Variant styles
  ...(variant === 'primary' && {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    boxShadow: theme.shadows[2],
    '&:hover': {
      backgroundColor: theme.palette.primary.dark,
      boxShadow: theme.shadows[4],
      transform: 'translateY(-1px)',
    },
    '&:active': {
      boxShadow: theme.shadows[8],
      transform: 'translateY(0)',
    },
  }),
  ...(variant === 'secondary' && {
    color: theme.palette.secondary.contrastText,
    backgroundColor: theme.palette.secondary.main,
    boxShadow: theme.shadows[2],
    '&:hover': {
      backgroundColor: theme.palette.secondary.dark,
      boxShadow: theme.shadows[4],
      transform: 'translateY(-1px)',
    },
  }),
  ...(variant === 'outlined' && {
    color: theme.palette.primary.main,
    border: `1px solid ${theme.palette.primary.main}`,
    backgroundColor: 'transparent',
    '&:hover': {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      transform: 'translateY(-1px)',
    },
  }),
  ...(variant === 'text' && {
    color: theme.palette.primary.main,
    backgroundColor: 'transparent',
    '&:hover': {
      backgroundColor: theme.palette.action.hover,
    },
  }),

  // State styles
  ...(disabled && {
    color: theme.palette.action.disabled,
    backgroundColor: theme.palette.action.disabledBackground,
    cursor: 'not-allowed',
    boxShadow: 'none',
    '&:hover': {
      backgroundColor: theme.palette.action.disabledBackground,
      transform: 'none',
    },
  }),
  ...(loading && {
    color: 'transparent',
    cursor: 'not-allowed',
  }),

  // Focus styles
  '&:focus-visible': {
    outline: `2px solid ${theme.palette.primary.main}`,
    outlineOffset: 2,
  },

  // Dark mode optimization
  '@media (prefers-color-scheme: dark)': {
    ...(variant === 'primary' && {
      boxShadow: `0 2px 4px rgba(0, 0, 0, 0.4)`,
    }),
  },

  // High contrast mode support
  '@media (prefers-contrast: high)': {
    border: `2px solid ${theme.palette.text.primary}`,
  },

  // Reduced motion support
  '@media (prefers-reduced-motion: reduce)': {
    transition: 'none',
    transform: 'none !important',
  },
}));

/**
 * Loading indicator for the component
 */
const LoadingIndicator = styled('span')(({ theme }) => ({
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 20,
  height: 20,
  border: `2px solid currentColor`,
  borderRadius: '50%',
  borderTopColor: 'transparent',
  animation: 'spin 1s linear infinite',
  
  '@keyframes spin': {
    '0%': {
      transform: 'translate(-50%, -50%) rotate(0deg)',
    },
    '100%': {
      transform: 'translate(-50%, -50%) rotate(360deg)',
    },
  },
}));

/**
 * {{name}} Component
 * 
 * {{#if (eq category 'core')}}
 * A versatile {{name}} component that provides consistent styling and behavior
 * across the application. Supports multiple variants, sizes, and states.
 * {{/if}}
 * {{#if (eq category 'forms')}}
 * A form {{name}} component that integrates seamlessly with form libraries
 * and provides validation, accessibility, and user experience optimizations.
 * {{/if}}
 * {{#if (eq category 'layout')}}
 * A layout {{name}} component that helps structure page content with
 * responsive design patterns and flexible configuration options.
 * {{/if}}
 * {{#if (eq category 'feedback')}}
 * A feedback {{name}} component that communicates system status and user
 * actions with appropriate visual and accessible feedback patterns.
 * {{/if}}
 * {{#if (eq category 'navigation')}}
 * A navigation {{name}} component that provides intuitive user navigation
 * with keyboard support and clear visual hierarchy.
 * {{/if}}
 * {{#if (eq category 'data-display')}}
 * A data display {{name}} component that presents information clearly
 * with optimized performance and accessibility features.
 * {{/if}}
 * {{#if (eq category 'surfaces')}}
 * A surface {{name}} component that provides elevated content areas
 * with depth, shadows, and proper contrast ratios.
 * {{/if}}
 * 
 * @example
 * ```tsx
 * <{{name}} variant="primary" size="medium">
 *   Click me
 * </{{name}}>
 * ```
 */
export const {{name}} = React.forwardRef<HTMLDivElement, {{name}}Props>(
  function {{name}}(props, ref) {
    const {
      children,
      variant = {{constantCase name}}_CONSTANTS.DEFAULT_VARIANT,
      size = {{constantCase name}}_CONSTANTS.DEFAULT_SIZE,
      disabled = false,
      loading = false,
      onClick,
      onKeyDown,
      'aria-label': ariaLabel,
      'aria-describedby': ariaDescribedBy,
      role = 'button',
      tabIndex = disabled ? -1 : 0,
      sx,
      ...other
    } = props;

    // Handle keyboard interactions
    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (disabled || loading) {
        event.preventDefault();
        return;
      }

      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        onClick?.(event as any);
      }

      onKeyDown?.(event);
    };

    // Handle click events
    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
      if (disabled || loading) {
        event.preventDefault();
        return;
      }

      onClick?.(event);
    };

    return (
      <{{name}}Root
        ref={ref}
        variant={variant}
        size={size}
        disabled={disabled}
        loading={loading}
        onClick={handleClick}
        onKeyDown={handleKeyDown}
        aria-label={ariaLabel}
        aria-describedby={ariaDescribedBy}
        aria-disabled={disabled || loading}
        aria-busy={loading}
        role={role}
        tabIndex={tabIndex}
        sx={sx}
        {...other}
      >
        {loading && <LoadingIndicator aria-hidden="true" />}
        {children}
      </{{name}}Root>
    );
  }
);

{{name}}.displayName = 'Mui{{name}}';

export default {{name}};