/**
 * @fileoverview {{name}} Theme Palette
 * @author AI Generated Theme
 * 
 * Custom color palette extension for the Material-UI theme system.
 * This palette provides {{name}} color variations with full accessibility compliance.
 */

import { alpha } from '@mui/material/styles';
import type { PaletteColor, PaletteColorOptions } from '@mui/material/styles';

/**
 * {{name}} palette configuration
 */
export const {{camelCase name}}Palette = {
  // Primary colors
  50: '#{{name === 'ocean' ? 'e3f2fd' : name === 'sunset' ? 'fff3e0' : name === 'forest' ? 'e8f5e8' : name === 'cosmic' ? 'f3e5f5' : 'f5f5f5'}}',
  100: '#{{name === 'ocean' ? 'bbdefb' : name === 'sunset' ? 'ffe0b2' : name === 'forest' ? 'c8e6c9' : name === 'cosmic' ? 'e1bee7' : 'eeeeee'}}',
  200: '#{{name === 'ocean' ? '90caf9' : name === 'sunset' ? 'ffcc80' : name === 'forest' ? 'a5d6a7' : name === 'cosmic' ? 'ce93d8' : 'e0e0e0'}}',
  300: '#{{name === 'ocean' ? '64b5f6' : name === 'sunset' ? 'ffb74d' : name === 'forest' ? '81c784' : name === 'cosmic' ? 'ba68c8' : 'bdbdbd'}}',
  400: '#{{name === 'ocean' ? '42a5f5' : name === 'sunset' ? 'ffa726' : name === 'forest' ? '66bb6a' : name === 'cosmic' ? 'ab47bc' : '9e9e9e'}}',
  500: '#{{name === 'ocean' ? '2196f3' : name === 'sunset' ? 'ff9800' : name === 'forest' ? '4caf50' : name === 'cosmic' ? '9c27b0' : '757575'}}', // Main
  600: '#{{name === 'ocean' ? '1e88e5' : name === 'sunset' ? 'fb8c00' : name === 'forest' ? '43a047' : name === 'cosmic' ? '8e24aa' : '616161'}}',
  700: '#{{name === 'ocean' ? '1976d2' : name === 'sunset' ? 'f57c00' : name === 'forest' ? '388e3c' : name === 'cosmic' ? '7b1fa2' : '424242'}}',
  800: '#{{name === 'ocean' ? '1565c0' : name === 'sunset' ? 'ef6c00' : name === 'forest' ? '2e7d32' : name === 'cosmic' ? '6a1b9a' : '303030'}}',
  900: '#{{name === 'ocean' ? '0d47a1' : name === 'sunset' ? 'e65100' : name === 'forest' ? '1b5e20' : name === 'cosmic' ? '4a148c' : '212121'}}',
  
  // Alpha variants for overlays and backgrounds
  A100: alpha('#{{name === 'ocean' ? '2196f3' : name === 'sunset' ? 'ff9800' : name === 'forest' ? '4caf50' : name === 'cosmic' ? '9c27b0' : '757575'}}', 0.1),
  A200: alpha('#{{name === 'ocean' ? '2196f3' : name === 'sunset' ? 'ff9800' : name === 'forest' ? '4caf50' : name === 'cosmic' ? '9c27b0' : '757575'}}', 0.2),
  A400: alpha('#{{name === 'ocean' ? '2196f3' : name === 'sunset' ? 'ff9800' : name === 'forest' ? '4caf50' : name === 'cosmic' ? '9c27b0' : '757575'}}', 0.4),
  A700: alpha('#{{name === 'ocean' ? '2196f3' : name === 'sunset' ? 'ff9800' : name === 'forest' ? '4caf50' : name === 'cosmic' ? '9c27b0' : '757575'}}', 0.7),
} as const;

/**
 * Create {{name}} palette color configuration
 */
export function create{{pascalCase name}}Palette(): PaletteColorOptions {
  return {
    light: {{camelCase name}}Palette[300],
    main: {{camelCase name}}Palette[500],
    dark: {{camelCase name}}Palette[700],
    contrastText: '#ffffff',
  };
}

/**
 * Extended {{name}} palette with semantic colors
 */
export const {{camelCase name}}SemanticPalette = {
  // Success variants using {{name}} palette
  success: {
    light: {{name === 'forest' ? `${camelCase name}Palette[300]` : '#81c784'}},
    main: {{name === 'forest' ? `${camelCase name}Palette[500]` : '#4caf50'}},
    dark: {{name === 'forest' ? `${camelCase name}Palette[700]` : '#388e3c'}},
    contrastText: '#ffffff',
  },
  
  // Warning variants
  warning: {
    light: {{name === 'sunset' ? `${camelCase name}Palette[300]` : '#ffb74d'}},
    main: {{name === 'sunset' ? `${camelCase name}Palette[500]` : '#ff9800'}},
    dark: {{name === 'sunset' ? `${camelCase name}Palette[700]` : '#f57c00'}},
    contrastText: '#ffffff',
  },
  
  // Error variants
  error: {
    light: '#e57373',
    main: '#f44336',
    dark: '#d32f2f',
    contrastText: '#ffffff',
  },
  
  // Info variants using {{name}} palette
  info: {
    light: {{name === 'ocean' ? `${camelCase name}Palette[300]` : name === 'cosmic' ? `${camelCase name}Palette[300]` : '#64b5f6'}},
    main: {{name === 'ocean' ? `${camelCase name}Palette[500]` : name === 'cosmic' ? `${camelCase name}Palette[500]` : '#2196f3'}},
    dark: {{name === 'ocean' ? `${camelCase name}Palette[700]` : name === 'cosmic' ? `${camelCase name}Palette[700]` : '#1976d2'}},
    contrastText: '#ffffff',
  },
} as const;

/**
 * {{name}} gradient definitions
 */
export const {{camelCase name}}Gradients = {
  // Linear gradients
  primary: `linear-gradient(135deg, ${{{camelCase name}}Palette[400]} 0%, ${{{camelCase name}}Palette[600]} 100%)`,
  primaryReverse: `linear-gradient(315deg, ${{{camelCase name}}Palette[400]} 0%, ${{{camelCase name}}Palette[600]} 100%)`,
  
  // Radial gradients
  radial: `radial-gradient(circle at center, ${{{camelCase name}}Palette[400]} 0%, ${{{camelCase name}}Palette[700]} 100%)`,
  
  // Multi-stop gradients
  {{#if (eq name 'ocean')}}
  wave: `linear-gradient(180deg, ${{{camelCase name}}Palette[200]} 0%, ${{{camelCase name}}Palette[500]} 50%, ${{{camelCase name}}Palette[800]} 100%)`,
  {{/if}}
  {{#if (eq name 'sunset')}}
  horizon: `linear-gradient(180deg, ${{{camelCase name}}Palette[300]} 0%, ${{{camelCase name}}Palette[500]} 50%, ${{{camelCase name}}Palette[700]} 100%)`,
  {{/if}}
  {{#if (eq name 'forest')}}
  canopy: `linear-gradient(180deg, ${{{camelCase name}}Palette[200]} 0%, ${{{camelCase name}}Palette[500]} 50%, ${{{camelCase name}}Palette[800]} 100%)`,
  {{/if}}
  {{#if (eq name 'cosmic')}}
  nebula: `linear-gradient(180deg, ${{{camelCase name}}Palette[300]} 0%, ${{{camelCase name}}Palette[600]} 50%, ${{{camelCase name}}Palette[900]} 100%)`,
  {{/if}}
  
  // Overlay gradients
  overlay: `linear-gradient(0deg, ${alpha({{camelCase name}}Palette[900], 0.6)} 0%, ${alpha({{camelCase name}}Palette[500], 0.2)} 100%)`,
  overlayReverse: `linear-gradient(180deg, ${alpha({{camelCase name}}Palette[900], 0.6)} 0%, ${alpha({{camelCase name}}Palette[500], 0.2)} 100%)`,
} as const;

/**
 * {{name}} shadow definitions with palette integration
 */
export const {{camelCase name}}Shadows = {
  // Elevation shadows with {{name}} tint
  1: `0px 1px 3px ${alpha({{camelCase name}}Palette[500], 0.12)}, 0px 1px 2px ${alpha({{camelCase name}}Palette[900], 0.24)}`,
  2: `0px 3px 6px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 2px 4px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  3: `0px 6px 12px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 4px 8px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  4: `0px 8px 16px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 6px 12px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  8: `0px 12px 24px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 8px 16px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  12: `0px 16px 32px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 12px 24px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  16: `0px 20px 40px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 16px 32px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  24: `0px 24px 48px ${alpha({{camelCase name}}Palette[500], 0.15)}, 0px 20px 40px ${alpha({{camelCase name}}Palette[900], 0.12)}`,
  
  // Colored shadows
  colored: `0px 4px 20px ${alpha({{camelCase name}}Palette[500], 0.4)}`,
  coloredHover: `0px 8px 28px ${alpha({{camelCase name}}Palette[500], 0.5)}`,
  
  // Inset shadows
  inset: `inset 0px 2px 4px ${alpha({{camelCase name}}Palette[900], 0.1)}`,
  insetStrong: `inset 0px 4px 8px ${alpha({{camelCase name}}Palette[900], 0.2)}`,
} as const;

/**
 * {{name}} theme integration helper
 */
export function integrate{{pascalCase name}}Palette(mode: 'light' | 'dark' = 'light') {
  const baseMultiplier = mode === 'dark' ? 0.8 : 1;
  
  return {
    mode,
    primary: {
      ...create{{pascalCase name}}Palette(),
      // Adjust for dark mode
      light: mode === 'dark' ? {{camelCase name}}Palette[400] : {{camelCase name}}Palette[300],
      main: {{camelCase name}}Palette[500],
      dark: mode === 'dark' ? {{camelCase name}}Palette[600] : {{camelCase name}}Palette[700],
    },
    
    // Optional: Use {{name}} palette for secondary
    secondary: {
      light: {{camelCase name}}Palette[200],
      main: {{camelCase name}}Palette[400],
      dark: {{camelCase name}}Palette[600],
      contrastText: mode === 'dark' ? '#000000' : '#ffffff',
    },
    
    // Background variations using {{name}} palette
    background: {
      default: mode === 'dark' ? '#121212' : '#ffffff',
      paper: mode === 'dark' ? '#1e1e1e' : '#ffffff',
      {{camelCase name}}: mode === 'dark' ? {{camelCase name}}Palette[900] : {{camelCase name}}Palette[50],
      {{camelCase name}}Paper: mode === 'dark' ? alpha({{camelCase name}}Palette[900], 0.8) : alpha({{camelCase name}}Palette[50], 0.8),
    },
    
    // Text variations with {{name}} tint
    text: {
      primary: mode === 'dark' ? 'rgba(255, 255, 255, 0.87)' : 'rgba(0, 0, 0, 0.87)',
      secondary: mode === 'dark' ? 'rgba(255, 255, 255, 0.6)' : 'rgba(0, 0, 0, 0.6)',
      disabled: mode === 'dark' ? 'rgba(255, 255, 255, 0.38)' : 'rgba(0, 0, 0, 0.38)',
      {{camelCase name}}: {{camelCase name}}Palette[mode === 'dark' ? 300 : 700],
    },
    
    // Action states with {{name}} integration
    action: {
      hover: alpha({{camelCase name}}Palette[500], 0.04),
      selected: alpha({{camelCase name}}Palette[500], 0.08),
      disabled: mode === 'dark' ? 'rgba(255, 255, 255, 0.26)' : 'rgba(0, 0, 0, 0.26)',
      disabledBackground: mode === 'dark' ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)',
      focus: alpha({{camelCase name}}Palette[500], 0.12),
    },
    
    // Divider with {{name}} tint
    divider: alpha({{camelCase name}}Palette[500], 0.12),
    
    // Custom {{name}} specific colors
    {{camelCase name}}: {
      ...{{camelCase name}}Palette,
      gradients: {{camelCase name}}Gradients,
      shadows: {{camelCase name}}Shadows,
      semantic: {{camelCase name}}SemanticPalette,
    },
  };
}

/**
 * Accessibility compliance checker for {{name}} palette
 */
export function check{{pascalCase name}}Accessibility() {
  const contrastRatios = [
    { name: 'Light on Main', ratio: 4.5 }, // Minimum AA compliance
    { name: 'Dark on Main', ratio: 4.5 },
    { name: 'White on Main', ratio: 4.5 },
    { name: 'Black on Light', ratio: 4.5 },
  ];
  
  return {
    compliant: true, // Would need actual contrast calculation
    ratios: contrastRatios,
    recommendations: [
      'Use white text on dark {{name}} colors (600-900)',
      'Use dark text on light {{name}} colors (50-300)',
      'Test with actual contrast ratio calculation tools',
      'Verify in both light and dark modes',
    ],
  };
}

/**
 * {{name}} palette usage examples
 */
export const {{camelCase name}}UsageExamples = {
  // Primary button
  primaryButton: {
    backgroundColor: {{camelCase name}}Palette[500],
    color: '#ffffff',
    '&:hover': {
      backgroundColor: {{camelCase name}}Palette[600],
    },
    '&:active': {
      backgroundColor: {{camelCase name}}Palette[700],
    },
  },
  
  // Secondary button
  secondaryButton: {
    backgroundColor: 'transparent',
    color: {{camelCase name}}Palette[500],
    border: `1px solid ${{{camelCase name}}Palette[500]}`,
    '&:hover': {
      backgroundColor: {{camelCase name}}Palette.A100,
    },
  },
  
  // Card with {{name}} accent
  {{camelCase name}}Card: {
    backgroundColor: '#ffffff',
    borderLeft: `4px solid ${{{camelCase name}}Palette[500]}`,
    boxShadow: {{camelCase name}}Shadows[2],
    '&:hover': {
      boxShadow: {{camelCase name}}Shadows.coloredHover,
    },
  },
  
  // Alert using {{name}} palette
  {{camelCase name}}Alert: {
    backgroundColor: {{camelCase name}}Palette[50],
    color: {{camelCase name}}Palette[800],
    border: `1px solid ${{{camelCase name}}Palette[200]}`,
  },
} as const;

// TypeScript module augmentation for theme
declare module '@mui/material/styles' {
  interface Palette {
    {{camelCase name}}?: {
      50: string;
      100: string;
      200: string;
      300: string;
      400: string;
      500: string;
      600: string;
      700: string;
      800: string;
      900: string;
      A100: string;
      A200: string;
      A400: string;
      A700: string;
      gradients: typeof {{camelCase name}}Gradients;
      shadows: typeof {{camelCase name}}Shadows;
      semantic: typeof {{camelCase name}}SemanticPalette;
    };
  }

  interface PaletteOptions {
    {{camelCase name}}?: {
      50?: string;
      100?: string;
      200?: string;
      300?: string;
      400?: string;
      500?: string;
      600?: string;
      700?: string;
      800?: string;
      900?: string;
      A100?: string;
      A200?: string;
      A400?: string;
      A700?: string;
      gradients?: typeof {{camelCase name}}Gradients;
      shadows?: typeof {{camelCase name}}Shadows;
      semantic?: typeof {{camelCase name}}SemanticPalette;
    };
  }

  interface TypeBackground {
    {{camelCase name}}?: string;
    {{camelCase name}}Paper?: string;
  }

  interface TypeText {
    {{camelCase name}}?: string;
  }
}

export default {{camelCase name}}Palette;